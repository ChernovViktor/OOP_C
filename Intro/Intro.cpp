/*
   Объектно ориентированное программирование (ООП)
   Это подход при котором программа строится из объектов
   Объект - это некая сущность, которая сущенствует в пространстве и времени
   Все объекты являются экземплярами какого либо класса или стрктуры, мы и сами являемся объектами в этом мире (объект класса мышь, объект класса телефон)
   Объекты принято классифицировать. Множетво объектов с одинаковым набором характеристик называют классом
   Характеристики объекта называют свойствами, кроме характеристик у объектов може быть еще состоянее

   Класс\структура - это синтаксическая конструкция описывающая объекты 
   класс\структура состоят из полей или членов (members) 
   Поля класса\структуры делятся на 2 типа: 

   1)переменные
   члены классов описывают характеристики объектов и его состояние

   2) методы
    определяют поведение объектов и взаимодействие их с другими объектами

    Метод - это функция внутри класса 

    Прежде чем использовать структуру или класс, их нужно создать
    Прежде чем создавать объекты, нужно создать структуру или класс


*/


#include <iostream>
using namespace std;

class Point   //описывает точку на плоскоси
{
    double x;
    double y;
public:

};

//После того как создали структуру, можно создавать ее объекты.
//Создавая структуру или класс мы создаем новый тип данных

int main()
{
    setlocale(LC_ALL, "ru");
    Point A;  //Объявление(создание) переменной A типа 'Point' (как int)
              //Создание оъекта структуры поинт 
              //Объявление объекта структуры Point
    //Объект это самая обычная переменная, но не примитивного типа, а пользовательского
    //Объект это переменная нашего типа
    //Объекты еще называют экземплярами класса или структуры
    //структуры и классы ещет называют пользовательскми типами данных
    A.x = 2;
    A.y = 3;
    cout << A.x << "\t" << A.y << endl;
    Point* pA = &A;
    cout << pA->x << "\t" << pA->y << endl;
}

/*
             ОБРАЩЕНИЕ К ПОЛЯМ ОБЪЕКТОВ
   Для обращения к полям (членам) объектов можно использовать

   '.'   - это оператор прямого доступа (Point Operator) используется для обращения к полям объекта по имени объекта
   '->'  - это оператор косвенного доступа (Arrow Operator) используется для обращения к полям объекта по адресу объекта

             ОСНОВНЫЕ КОНЦЕПЦИИ ООП

    *Единственным отличием между классом и структурой является то, что в структуре все поля по умолчанию открытые(public),
    а в классе все поля по умолчанию закрытые(private)

    *ООП базируется на трех основных концепциях:
-----------------------------------------------------------------------------------------------------------------------------
    1) Инкапсуляция
    Это сокрытие определенной части класса от внешнего мира
    Инкапсуляция реализуется модификаторами доступа get/set - методами

     *Модификаторы доступа:

        -private: закрытые поля (члены). Эти поля доступны только внутри класса и недоступны за его пределами
         в private секции класса обязательно должны быть переменные члены класса. Это защищает их от случайной перезаписи.

        -public:  открытые поля, доступные из любого места программы. В public секции обычно размещают методы.

        -protected: Защищенные поля. Этот модификатор доступа используется только при наследовании
         protected поля доступны только внутри класса и его дочерних классов

    * Get/set методы
    
         - get (взять, получить). get-методы открывают доступ к переменным класса на чтение,
           они позволяют получить, прочитать или взять значение определенной переменной объекта.

         - set (установить, задать) set-методы открывают доступ к переменным в классе на запись.
           Они позволяют задать значение той или иной переменной. 
           Кроме того set-методы обеспечивают фильтрацию данных, 
           то есть предотвращают запись некорректных значений в переменные класса (запись некорректных знач в объ-кт)
           Фильтрация данных задается обычными "if"

         - get и set метод должен быть у каждой переменной в классе 

    * ИТОГО:
         Инкапсуляция защищает наши объекты от случайной перезаписи и от записи в них некорректных значений

------------------------------------------------------------------------------------------------------------------------------
    2) Наследование
------------------------------------------------------------------------------------------------------------------------------
    3) Полиморфизм
------------------------------------------------------------------------------------------------------------------------------

           
*/
